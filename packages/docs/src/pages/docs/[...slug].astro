---
import Layout from "../../layouts/DocsLayout.astro";
import SideBar from "./SideBar.astro";
import Toc from "./Toc.astro";
import { getCollection } from "astro:content";

export const prerender = true;

export async function getStaticPaths() {
  const docsEntries = await getCollection("docs");

  function resolveSlug(slug: string) {
    const segments = slug.split("/");
    const cleanedSegments = segments.map((segment) =>
      segment.replace(/^\d+\.?/, ""),
    );
    return cleanedSegments.join("/");
  }

  const paths = docsEntries.map((entry) => ({
    params: { slug: resolveSlug(entry.slug) },
    props: { entry: {
      ...entry,
      slug: resolveSlug(entry.slug),
    } },
  }));
  return paths;
}

const { entry } = Astro.props;
const { Content, headings } = await entry.render();
const docsEntries = await getCollection("docs");

// Sort docsEntries by nav_group_order and nav_order
const sortedEntries = docsEntries.sort((a, b) => a.slug.localeCompare(b.slug));
// Find the index of the current entry
const currentIndex = sortedEntries.findIndex((it) => it.slug === entry.slug);

// Find the previous and next entry
const prevEntry = currentIndex > 0 ? sortedEntries[currentIndex - 1] : null;
const nextEntry =
  currentIndex < sortedEntries.length - 1
    ? sortedEntries[currentIndex + 1]
    : null;
---

<Layout
  title={`${entry.data.nav_group}/${entry.data.title}`}
  description={entry.data.description}
  image={entry.data.image}
>
  <div class="relative mx-auto flex flex-col lg:flex-row p-4 lg:p-8 gap-4">
    <!-- Sidebar -->
    <div class="sidebar-container lg:sticky lg:top-20 lg:h-[calc(100vh-5rem-32px)]">
      <div class="glass lg:min-w-[250px] h-full overflow-y-auto">
        <SideBar />
      </div>
    </div>
    
    <!-- Main Content -->
    <div
      class="glass prose prose-modern w-full max-w-full px-4 lg:px-8"
    >
      <Content />
    </div>
    
    <!-- TOC -->
    <div class="toc-container lg:sticky lg:top-20 lg:h-[calc(100vh-5rem-32px)]">
      <div class="glass h-full overflow-y-auto">
        <Toc headings={headings} />
      </div>
    </div>
  </div>
  
  <!-- Mobile Overlay -->
  <div class="mobile-overlay"></div>
  
  <!-- Mobile Toggle Buttons -->
  <div class="mobile-buttons">
    <button class="mobile-toggle-btn" data-target="sidebar" aria-label="Toggle Sidebar">
      <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <line x1="3" y1="12" x2="21" y2="12"></line>
        <line x1="3" y1="6" x2="21" y2="6"></line>
        <line x1="3" y1="18" x2="21" y2="18"></line>
      </svg>
    </button>
    <button class="mobile-toggle-btn" data-target="toc" aria-label="Toggle Table of Contents">
      <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <line x1="8" y1="6" x2="21" y2="6"></line>
        <line x1="8" y1="12" x2="21" y2="12"></line>
        <line x1="8" y1="18" x2="21" y2="18"></line>
        <circle cx="4" cy="6" r="1" fill="currentColor"></circle>
        <circle cx="4" cy="12" r="1" fill="currentColor"></circle>
        <circle cx="4" cy="18" r="1" fill="currentColor"></circle>
      </svg>
    </button>
  </div>
</Layout>

<style>
  main {
  }
</style>

<style is:global>
  .move {
    width: 200px;
    height: 80px;
    border: white solid 1px;
    font-size: 20px;
    display: flex;
    align-items: center;
    justify-content: center;
    text-align: center;
  }
  .move.disabled {
    display: none;
  }
</style>

<style>
  /* Mobile styles */
  @media (max-width: 1024px) {
    .sidebar-container,
    .toc-container {
      position: fixed;
      top: 64px;
      bottom: 0;
      width: 280px;
      z-index: 40;
      transition: transform 0.3s ease-in-out;
    }
    
    .sidebar-container {
      left: 0;
      transform: translateX(-100%);
    }
    
    .toc-container {
      right: 0;
      transform: translateX(100%);
    }
    
    .sidebar-container.show {
      transform: translateX(0);
    }
    
    .toc-container.show {
      transform: translateX(0);
    }
  }
  
  /* Mobile overlay */
  .mobile-overlay {
    display: none;
    position: fixed;
    inset: 0;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 30;
  }
  
  .mobile-overlay.show {
    display: block;
  }
  
  /* Mobile toggle buttons */
  .mobile-buttons {
    display: none;
  }
  
  @media (max-width: 1024px) {
    .mobile-buttons {
      display: flex;
      position: fixed;
      bottom: 1rem;
      right: 1rem;
      gap: 0.5rem;
      z-index: 50;
    }
  }
  
  .mobile-toggle-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 48px;
    height: 48px;
    background-color: rgba(255, 255, 255, 0.9);
    border: 1px solid rgba(229, 231, 235, 0.3);
    border-radius: 50%;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    cursor: pointer;
    transition: all 0.2s;
  }
  
  .mobile-toggle-btn:hover {
    background-color: rgba(255, 255, 255, 1);
    transform: scale(1.05);
  }
  
  .mobile-toggle-btn:active {
    transform: scale(0.95);
  }
</style>

<script>
  // Mobile menu toggle functionality
  document.addEventListener('DOMContentLoaded', () => {
    const buttons = document.querySelectorAll('.mobile-toggle-btn');
    const overlay = document.querySelector('.mobile-overlay');
    const sidebar = document.querySelector('.sidebar-container');
    const toc = document.querySelector('.toc-container');
    
    buttons.forEach(button => {
      button.addEventListener('click', () => {
        const target = button.getAttribute('data-target');
        const container = target === 'sidebar' ? sidebar : toc;
        const isOpen = container?.classList.contains('show');
        
        // Close all panels first
        sidebar?.classList.remove('show');
        toc?.classList.remove('show');
        overlay?.classList.remove('show');
        
        // Open the target panel if it wasn't already open
        if (!isOpen && container) {
          container.classList.add('show');
          overlay?.classList.add('show');
        }
      });
    });
    
    // Close panels when clicking overlay
    overlay?.addEventListener('click', () => {
      sidebar?.classList.remove('show');
      toc?.classList.remove('show');
      overlay.classList.remove('show');
    });
  });
</script>
