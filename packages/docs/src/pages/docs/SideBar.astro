---
import { getCollection } from "astro:content";
import { normalizePath } from "./utils";

function resolveSlug(slug: string) {
  const segments = slug.split("/");
  const cleanedSegments = segments.map((segment) =>
    segment.replace(/^\d+\.?/, ""),
  );
  return cleanedSegments.join("/");
}

const _docsEntries = await getCollection("docs");
const docsEntries = _docsEntries
.sort((a, b) => a.slug.localeCompare(b.slug))
.map((entry) => ({
  ...entry,
  slug: resolveSlug(entry.slug),
}));



const url = new URL(Astro.request.url);
const pathSegments = url.pathname.split("/").filter(Boolean);
const lang = pathSegments[1];


// 현재 언어에 맞는 문서만 필터링
const filteredDocs = docsEntries.filter((entry) =>
  entry.slug.startsWith(lang + "/"),
)

// navigation 정보로 표현할 객체 만들기
const navigation = filteredDocs.reduce(
  (acc, entry, i) => {
    const { nav_group, nav_order, title, nav_title } = entry.data;

    // 해당 navGroup이 이미 존재하는지 확인
    let group = acc.find((g) => g.name === nav_group);
    if (!group) {
      // 존재하지 않으면 새로운 그룹 생성
      group = { name: nav_group, items: [] };
      acc.push(group);
    }

    // 그룹에 문서 추가
    group.items.push({
      url: `/docs/${entry.slug}`,
      title: nav_title ?? title,
    });

    return acc;
  },
  [] as {
    name: string;
    items: { url: string; title: string }[];
  }[],
);

const normalizedPathname = normalizePath(url.pathname);
---

<nav class="sidebar-nav">
  {
    navigation.map((group) => (
      <div class="nav-group">
        <h3 class="nav-group-title">{group.name}</h3>
        <ul class="nav-list">
          {group.items.map((item) => (
            <li>
              <a
                href={item.url}
                class:list={[
                  "nav-link",
                  normalizePath(item.url) === normalizedPathname && "active"
                ]}
              >
                {item.title}
              </a>
            </li>
          ))}
        </ul>
      </div>
    ))
  }
</nav>

<style>
  .sidebar-nav {
    height: 100%;
    overflow-y: auto;
    padding-bottom: 1rem;
  }

  .nav-group {
    margin-bottom: 2rem;
  }

  .nav-group-title {
    font-size: 1.125rem;
    font-weight: 700;
    color: var(--neu-text);
    margin-bottom: 0.75rem;
    padding-left: 0.5rem;
  }

  .nav-list {
    list-style: none;
    padding: 0;
    margin: 0;
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
  }

  .nav-link {
    display: block;
    padding: 0.625rem 1rem;
    font-size: 0.9375rem;
    color: var(--neu-text-secondary);
    text-decoration: none;
    border-radius: 12px;
    transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
    position: relative;
  }

  .nav-link:hover {
    color: var(--neu-text);
    background: var(--neu-bg);
    box-shadow: var(--neu-shadow-sm);
    transform: translateX(2px);
  }

  .nav-link.active {
    color: var(--neu-accent);
    font-weight: 600;
    background: var(--neu-bg);
    box-shadow: var(--neu-shadow-inset);
  }

  .nav-link.active::before {
    content: '';
    position: absolute;
    left: 0;
    top: 50%;
    transform: translateY(-50%);
    width: 3px;
    height: 60%;
    background: var(--neu-accent);
    border-radius: 0 2px 2px 0;
  }

  /* Scrollbar styling */
  .sidebar-nav::-webkit-scrollbar {
    width: 6px;
  }

  .sidebar-nav::-webkit-scrollbar-track {
    background: transparent;
  }

  .sidebar-nav::-webkit-scrollbar-thumb {
    background-color: var(--neu-shadow-dark);
    border-radius: 3px;
    opacity: 0.3;
  }

  .sidebar-nav::-webkit-scrollbar-thumb:hover {
    opacity: 0.5;
  }
</style>