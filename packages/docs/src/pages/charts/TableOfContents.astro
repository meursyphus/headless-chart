---
import { getCollection } from "astro:content";

  function resolveSlug(slug: string) {
    const segments = slug.split("/");
    const cleanedSegments = segments.map((segment) =>
      segment.replace(/^\d+\.?/, ""),
    );
    return cleanedSegments.join("/");
  }

const charts = await getCollection("charts");
const sortedCharts = charts
  .sort((a, b) => a.slug.localeCompare(b.slug))
  .map((entry) => ({  ...entry,
    slug: resolveSlug(entry.slug),
  }))
  .map((entry) => {
    const segments = entry.slug.split("/");
    return {
      ...entry,
      slug: segments.map((segment) => segment.replace(/^\d+./, "")).join("/"),
      order: parseInt(segments[1].split("_")[0]) || 0,
      nav_group: entry.data.nav_group || "Others",
    };
  });

// Group tutorials by nav_group and filter by language
const { currentSlug } = Astro.props;

const groupedTutorials = sortedCharts.reduce(
  (acc, tutorial) => {
    const group = tutorial.nav_group;
    if (!acc[group]) {
      acc[group] = [];
    }
    acc[group].push(tutorial);
    return acc;
  },
  {} as Record<string, typeof sortedCharts>,
);


---

<div class="toc-container">
  {
    Object.entries(groupedTutorials).map(([group, tutorials]) => (
      <div class="toc-group">
        <h3 class="toc-group-title">
          {group}
        </h3>
        <ul class="toc-list">
          {tutorials.map((tutorial) => (
            <li>
              <a
                href={`/charts/${tutorial.slug}`}
                class:list={[
                  "toc-link",
                  currentSlug === tutorial.slug && "active"
                ]}
              >
                {tutorial.data.title}
              </a>
            </li>
          ))}
        </ul>
      </div>
    ))
  }
</div>

<style>
  .toc-container {
    padding: 1.5rem;
    font-size: 0.875rem;
  }

  .toc-group {
    margin-bottom: 2rem;
  }

  .toc-group-title {
    margin-bottom: 0.75rem;
    font-size: 1rem;
    font-weight: 600;
    color: var(--neu-text);
  }

  .toc-list {
    list-style: none;
    padding: 0;
    margin: 0;
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .toc-link {
    display: block;
    padding: 0.625rem 1rem;
    font-size: 0.875rem;
    color: var(--neu-text-secondary);
    text-decoration: none;
    border-radius: 12px;
    transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
    background: var(--neu-bg);
  }

  .toc-link:hover {
    color: var(--neu-text);
    box-shadow: var(--neu-shadow-sm);
    transform: translateX(2px);
  }

  .toc-link.active {
    color: var(--neu-accent);
    font-weight: 500;
    box-shadow: var(--neu-shadow-inset);
    background: var(--neu-bg);
  }
</style>
