---
import SandPack from "./SandPack.tsx";
import Layout from "../../layouts/ChartsLayout.astro";
import { getCollection } from "astro:content";
import TableOfContents from "./TableOfContents.astro";

export const prerender = true;

export const getStaticPaths = async () => {
  const charts = await getCollection("charts");

  function resolveSlug(slug: string) {
    const segments = slug.split("/");
    const cleanedSegments = segments.map((segment) =>
      segment.replace(/^\d+\.?/, ""),
    );
    return cleanedSegments.join("/");
  }


  const result = charts
    .map((entry) => ({
      ...entry,
      slug: resolveSlug(entry.slug),
    }))
    .map((entry, i, arr) => ({
      params: {
        slug: entry.slug,
      },
      props: {
        prev: arr[i - 1],
        next: arr[i + 1],
        entry,
      },
    }));

    return result;
};

const { entry } = Astro.props;

const { Content } = await entry.render();
---

<Layout
  title={`${entry.data.nav_group}/${entry.data.title} - Flitter`}
  description={entry.data.description}
  image={entry.data.image}
>
  <div class="relative flex flex-col lg:grid lg:grid-cols-[240px_minmax(0,1fr)] min-h-[calc(100vh-var(--header))] p-4 lg:p-8" id="mainContainer">
    <aside class="sidebar-container neu-card lg:sticky lg:top-4 lg:h-[calc(100vh-var(--header)-2rem)] lg:rounded-xl overflow-y-auto overflow-x-hidden">
      <div
        class="absolute -right-2 top-1/2 -translate-y-1/2 h-12 w-4 cursor-col-resize rounded-full bg-var(--neu-bg) shadow-sm hover:shadow-md transition-shadow hidden lg:flex items-center justify-center"
        id="tocResizer"
      >
        <div class="w-0.5 h-6 bg-var(--neu-text-secondary) opacity-30 rounded"></div>
      </div>
      <TableOfContents currentSlug={entry.slug} />
    </aside>

    <div class="flex flex-col w-full lg:ml-6 min-h-full pb-4">
      <div class="prose prose-modern max-w-none neu-card rounded-xl p-6 lg:p-8 mb-6">
        <Content />
      </div>

      <div class="flex-1 neu-card rounded-xl p-4 lg:p-6">
        <div id="originalSandpack" class="h-full">
          <SandPack files={entry.data.files} client:only="react" />
        </div>
      </div>
    </div>
  </div>
  
  <!-- Mobile Overlay -->
  <div class="mobile-overlay"></div>
  
  <!-- Mobile Toggle Button -->
  <div class="mobile-buttons">
    <button class="mobile-toggle-btn neu-button" data-target="sidebar" aria-label="Toggle Sidebar">
      <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <line x1="3" y1="12" x2="21" y2="12"></line>
        <line x1="3" y1="6" x2="21" y2="6"></line>
        <line x1="3" y1="18" x2="21" y2="18"></line>
      </svg>
    </button>
  </div>
</Layout>

<style is:global>
  .sp-preview-container html,
  .sp-preview-container body {
    height: 100%;
    margin: 0;
    padding: 0;
  }

  @media (max-width: 1024px) {
    .sp-wrapper {
      flex-direction: column !important;
    }
    
    .sp-layout {
      flex-direction: column !important;
      height: auto !important;
    }

    .sp-stack {
      height: auto !important;
      min-height: 300px;
    }

    .sp-tabs {
      flex-wrap: nowrap;
      overflow-x: auto;
      -webkit-overflow-scrolling: touch;
      padding-bottom: 4px;
    }

    .sp-tab-button {
      white-space: nowrap;
    }

    /* 에디터와 프리뷰 영역을 세로로 배치 */
    .sp-layout > div:first-child {
      width: 100% !important;
      max-width: none !important;
    }

    .sp-layout > div:last-child {
      width: 100% !important;
      border-left: none !important;
      border-top: 1px solid var(--sp-colors-surface2);
    }
  }
  
  /* Mobile styles */
  @media (max-width: 1024px) {
    .sidebar-container {
      position: fixed;
      top: 64px;
      bottom: 0;
      left: 0;
      width: 280px;
      z-index: 40;
      transform: translateX(-100%);
      transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      border-radius: 0;
      box-shadow: 4px 0 12px rgba(0, 0, 0, 0.1);
    }
    
    .sidebar-container.show {
      transform: translateX(0);
    }
  }
  
  /* Mobile overlay */
  .mobile-overlay {
    display: none;
    position: fixed;
    inset: 0;
    background-color: rgba(0, 0, 0, 0.3);
    backdrop-filter: blur(4px);
    z-index: 30;
  }
  
  .mobile-overlay.show {
    display: block;
  }
  
  /* Mobile toggle button */
  .mobile-buttons {
    display: none;
  }
  
  @media (max-width: 1024px) {
    .mobile-buttons {
      display: flex;
      position: fixed;
      bottom: 2rem;
      right: 2rem;
      gap: 0.5rem;
      z-index: 50;
    }
  }
  
  .mobile-toggle-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 56px;
    height: 56px;
    border-radius: 50%;
    padding: 0;
  }
  
  .mobile-toggle-btn svg {
    width: 24px;
    height: 24px;
    color: var(--neu-text);
  }
</style>

<script>
  // Mobile menu toggle functionality  
  const setupMobileMenu = () => {
    const button = document.querySelector('.mobile-toggle-btn');
    const overlay = document.querySelector('.mobile-overlay');
    const sidebar = document.querySelector('.sidebar-container');
    
    if (!button || !overlay || !sidebar) {
      console.warn('Mobile menu elements not found');
      return;
    }
    
    button.addEventListener('click', (e) => {
      e.stopPropagation();
      const isOpen = sidebar.classList.contains('show');
      
      if (isOpen) {
        sidebar.classList.remove('show');
        overlay.classList.remove('show');
      } else {
        sidebar.classList.add('show');
        overlay.classList.add('show');
      }
    });
    
    // Close sidebar when clicking overlay
    overlay.addEventListener('click', () => {
      sidebar.classList.remove('show');
      overlay.classList.remove('show');
    });
  };
  
  // Run setup when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', setupMobileMenu);
  } else {
    setupMobileMenu();
  }

  const resizer = document.getElementById("tocResizer");
  const sidebar = resizer?.parentElement;
  const container = sidebar?.parentElement;

  let isResizing = false;
  let startX: number;
  let startWidth: number;

  resizer?.addEventListener("mousedown", initResize);

  function initResize(e: MouseEvent) {
    if (window.innerWidth < 1024) return;
    isResizing = true;
    startX = e.clientX;
    startWidth = sidebar?.offsetWidth || 0;

    document.addEventListener("mousemove", resize);
    document.addEventListener("mouseup", stopResize);
    document.body.style.userSelect = "none";
    document.body.style.cursor = "col-resize";
  }

  function resize(e: MouseEvent) {
    if (!isResizing) return;

    const diff = e.clientX - startX;
    const newWidth = startWidth + diff;

    if (newWidth >= 160 && newWidth <= 400) {
      container?.style.setProperty(
        "grid-template-columns",
        `${newWidth}px minmax(0,1fr)`,
      );
    }
  }

  function stopResize() {
    isResizing = false;
    document.removeEventListener("mousemove", resize);
    document.removeEventListener("mouseup", stopResize);
    document.body.style.userSelect = "";
    document.body.style.cursor = "";
  }
</script>

<style>
  #tocResizer {
    z-index: 10;
  }
  
  #tocResizer:hover {
    box-shadow: var(--neu-shadow-sm);
  }
  
  #tocResizer:active {
    box-shadow: var(--neu-shadow-inset);
  }
  
  /* Prose styling */
  .prose {
    color: var(--neu-text);
  }
  
  .prose h1, .prose h2, .prose h3, .prose h4 {
    color: var(--neu-text);
  }
  
  .prose p, .prose li {
    color: var(--neu-text-secondary);
  }
  
  .prose a {
    color: var(--neu-accent);
  }
  
  .prose a:hover {
    color: var(--neu-accent-light);
  }
  
  .prose code {
    background: var(--neu-bg-alt);
    color: var(--neu-text);
    padding: 0.125rem 0.375rem;
    border-radius: 0.25rem;
  }
  
  .prose pre {
    background: var(--neu-bg-alt);
    box-shadow: var(--neu-shadow-inset);
    border-radius: 12px;
  }
</style>
