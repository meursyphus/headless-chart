---
import SandPack from "../../components/SandPack.tsx";
import Layout from "../../layouts/ChartsLayout.astro";
import { getCollection } from "astro:content";
import TableOfContents from "./TableOfContents.astro";

export const prerender = true;

export const getStaticPaths = async () => {
  const charts = await getCollection("charts");

  function resolveSlug(slug: string) {
    const segments = slug.split("/");
    const cleanedSegments = segments.map((segment) =>
      segment.replace(/^\d+\.?/, ""),
    );
    return cleanedSegments.join("/");
  }


  const result = charts
    .map((entry) => ({
      ...entry,
      slug: resolveSlug(entry.slug),
    }))
    .map((entry, i, arr) => ({
      params: {
        slug: entry.slug,
      },
      props: {
        prev: arr[i - 1],
        next: arr[i + 1],
        entry,
      },
    }));

    return result;
};

const { entry } = Astro.props;

const { Content } = await entry.render();
---

<Layout
  title={`${entry.data.nav_group}/${entry.data.title} - Flitter`}
  description={entry.data.description}
  image={entry.data.image}
>
  <div class="relative flex flex-col lg:grid lg:grid-cols-[220px_minmax(0,1fr)] min-h-[calc(100vh-var(--header))] p-4 lg:p-8" id="mainContainer">
    <button
      id="sidebar-toggle"
      class="lg:hidden fixed bottom-4 left-4 z-50 p-2 rounded-full bg-white shadow-lg"
      aria-label="Toggle Sidebar"
    >
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <line x1="3" y1="12" x2="21" y2="12"></line>
        <line x1="3" y1="6" x2="21" y2="6"></line>
        <line x1="3" y1="18" x2="21" y2="18"></line>
      </svg>
    </button>

    <aside class="sidebar-container glass lg:sticky lg:top-0 lg:h-full border-r border-gray-200/30 overflow-y-auto overflow-x-hidden fixed inset-y-0 left-0 z-40 w-64 -translate-x-full lg:translate-x-0 transition-transform duration-300 ease-in-out">
      <div
        class="absolute -right-1 top-0 h-full w-2 cursor-col-resize hover:bg-purple-500/20 hidden lg:block"
        id="tocResizer"
      >
      </div>
      <TableOfContents currentSlug={entry.slug} />
    </aside>

    <div class="flex flex-col w-full lg:ml-2 min-h-full pb-4">
      <div class="prose prose-modern max-w-none p-4 lg:p-8">
        <Content />
      </div>

      <div class="flex-1 border-t border-gray-200/30 px-4 lg:px-8">
        <div id="originalSandpack" class="h-full">
          <SandPack files={entry.data.files} client:only="react" />
        </div>
      </div>
    </div>
  </div>
</Layout>

<style is:global>
  .sp-preview-container html,
  .sp-preview-container body {
    height: 100%;
    margin: 0;
    padding: 0;
  }

  .sidebar-container.show {
    transform: translateX(0);
  }

  @media (max-width: 1024px) {
    .sp-wrapper {
      flex-direction: column !important;
    }
    
    .sp-layout {
      flex-direction: column !important;
      height: auto !important;
    }

    .sp-stack {
      height: auto !important;
      min-height: 300px;
    }

    .sp-tabs {
      flex-wrap: nowrap;
      overflow-x: auto;
      -webkit-overflow-scrolling: touch;
      padding-bottom: 4px;
    }

    .sp-tab-button {
      white-space: nowrap;
    }

    /* 에디터와 프리뷰 영역을 세로로 배치 */
    .sp-layout > div:first-child {
      width: 100% !important;
      max-width: none !important;
    }

    .sp-layout > div:last-child {
      width: 100% !important;
      border-left: none !important;
      border-top: 1px solid var(--sp-colors-surface2);
    }
  }
</style>

<script>
  const sidebarToggle = document.getElementById("sidebar-toggle");
  const sidebarContainer = document.querySelector(".sidebar-container");
  const mainContainer = document.getElementById("mainContainer");

  sidebarToggle?.addEventListener("click", () => {
    sidebarContainer?.classList.toggle("show");
  });

  // Close sidebar when clicking outside on mobile
  mainContainer?.addEventListener("click", (e) => {
    if (window.innerWidth < 1024 && sidebarContainer?.classList.contains("show")) {
      const isClickInside = sidebarContainer.contains(e.target as Node) || 
                           sidebarToggle?.contains(e.target as Node);
      if (!isClickInside) {
        sidebarContainer.classList.remove("show");
      }
    }
  });

  const resizer = document.getElementById("tocResizer");
  const sidebar = resizer?.parentElement;
  const container = sidebar?.parentElement;

  let isResizing = false;
  let startX: number;
  let startWidth: number;

  resizer?.addEventListener("mousedown", initResize);

  function initResize(e: MouseEvent) {
    if (window.innerWidth < 1024) return;
    isResizing = true;
    startX = e.clientX;
    startWidth = sidebar?.offsetWidth || 0;

    document.addEventListener("mousemove", resize);
    document.addEventListener("mouseup", stopResize);
    document.body.style.userSelect = "none";
    document.body.style.cursor = "col-resize";
  }

  function resize(e: MouseEvent) {
    if (!isResizing) return;

    const diff = e.clientX - startX;
    const newWidth = startWidth + diff;

    if (newWidth >= 160 && newWidth <= 400) {
      container?.style.setProperty(
        "grid-template-columns",
        `${newWidth}px minmax(0,1fr)`,
      );
    }
  }

  function stopResize() {
    isResizing = false;
    document.removeEventListener("mousemove", resize);
    document.removeEventListener("mouseup", stopResize);
    document.body.style.userSelect = "";
    document.body.style.cursor = "";
  }
</script>

<style>
  #tocResizer {
    transition: background-color 0.2s;
    z-index: 10;
  }
  #tocResizer:active {
    background-color: rgb(59 130 246 / 0.2);
  }

  #sidebar-toggle {
    background: white;
    border: 1px solid #e5e5e5;
  }

  #sidebar-toggle:hover {
    background: #f5f5f5;
  }
</style>
